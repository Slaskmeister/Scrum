import com.github.lgooddatepicker.components.DateTimePicker;
import java.awt.HeadlessException;
import java.sql.DriverManager;
import java.util.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import models.Meeting;
import models.MötesFörslag;
import models.User;
import repository.MeetingRepository;
import repository.UserRepository;

/**
 *
 * @author jenniferhuang
 */
public class SkapaMöte extends javax.swing.JFrame {
    
    private List<User> users;
    private UserRepository userRepository;
    private MeetingRepository meetingRepository;
   
    private List<User> usersToInvite;
   
    
    /**
     * Creates new form jennifer
     */
    public SkapaMöte() {
        initComponents();
        userRepository = new UserRepository();
        meetingRepository = new MeetingRepository();
        usersToInvite = new ArrayList();
        fetchUsers();
        setDefaultTimeInTimePicker();
    }
    
    public void fetchUsers() {
       users = userRepository.getUsers();
       addUsersToCombobox();
    }
    
    public void setDefaultTimeInTimePicker() {
        meetingTimePicker.datePicker.setDateToToday();
        meetingTimePicker.timePicker.setTimeToNow();
    }
    
    public void addUsersToCombobox() {
        usersCombobox.removeAllItems();
        users.forEach(user -> {
            usersCombobox.addItem(user);
        });
    }
    
    public void updateInviteList() {
        DefaultListModel<User> model = new DefaultListModel<>();
        usersToInvite.forEach(user -> {
            model.addElement(user);
        });
        invitedList.setModel(model);
    }
   
    public String formatSuccessText(String meetingName, LocalDateTime localDateTime, Integer invitedUsers) {
        return "Mötet: " + meetingName + "\n" + 
                "Skapat: " + localDateTime + "\n" +
                "Antal inbjudna: " + invitedUsers +"\n \n" + 
                "Har skapats";
    }
    
    public LocalDateTime getAndValidateDateTime(DateTimePicker dateTimePicker){
    LocalDate meetingDate = dateTimePicker.datePicker.getDate();
        LocalTime meetingTime = dateTimePicker.timePicker.getTime();
        
        if(!Validate.localDateIsValid(meetingDate)) {
            JOptionPane.showMessageDialog(null, "Du måste ange ett datum för mötet.");
            return null;
        }
        
        if(!Validate.localTimeIsValid(meetingTime)) {
            JOptionPane.showMessageDialog(null, "Du måste ange en tid för mötet.");
            return null;
        }

        
       return LocalDateTime.of(meetingDate, meetingTime);

   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */ 
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usersCombobox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        meetingTitleTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        skapaMöteBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        invitedList = new javax.swing.JList<>();
        inviteUserBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        removeUsersBtn = new javax.swing.JButton();
        meetingTimePicker = new com.github.lgooddatepicker.components.DateTimePicker();
        tidLbl = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tidFörslag1 = new com.github.lgooddatepicker.components.DateTimePicker();
        tidFörslag2 = new com.github.lgooddatepicker.components.DateTimePicker();
        tidLbl2 = new javax.swing.JLabel();
        tidLbl3 = new javax.swing.JLabel();
        skapaMötesFörfrågaBtn = new javax.swing.JButton();
        tidFörslag3 = new com.github.lgooddatepicker.components.DateTimePicker();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        usersCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersComboboxActionPerformed(evt);
            }
        });

        jLabel1.setText("Användare:");

        jLabel2.setText("Titel");

        skapaMöteBtn.setText("Skapa möte");
        skapaMöteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skapaMöteBtnActionPerformed(evt);
            }
        });

        invitedList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                invitedListFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                invitedListFocusLost(evt);
            }
        });
        invitedList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                invitedListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(invitedList);

        inviteUserBtn.setText("Bjud till möte");
        inviteUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inviteUserBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Inbjudna");

        removeUsersBtn.setText("Ta bort inbjudna");
        removeUsersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeUsersBtnActionPerformed(evt);
            }
        });

        tidLbl.setText("Tid 1");

        jLabel5.setText("Skapa möte");
        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N

        tidLbl2.setText("Tid 2");

        tidLbl3.setText("Tid 3");

        skapaMötesFörfrågaBtn.setText("Skapa mötes förfråga");
        skapaMötesFörfrågaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skapaMötesFörfrågaBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Mötes förfrågan");

        jLabel6.setText("Skapa möte");

        jLabel7.setText("Tid");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tidLbl3)
                        .addGap(18, 18, 18)
                        .addComponent(tidFörslag3, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tidLbl)
                            .addComponent(tidLbl2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(41, 41, 41)
                                                .addComponent(jLabel5))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(276, 276, 276)
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(meetingTitleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(277, 277, 277)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(removeUsersBtn)
                                                        .addGap(202, 202, 202))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel3)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(usersCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(18, 18, 18)
                                                            .addComponent(inviteUserBtn)))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(skapaMötesFörfrågaBtn)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(skapaMöteBtn))))
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(tidFörslag2, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(389, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(tidFörslag1, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(meetingTimePicker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(207, 207, 207))))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(meetingTitleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(meetingTimePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tidFörslag1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tidLbl))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tidFörslag2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tidLbl2))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tidFörslag3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tidLbl3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(usersCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inviteUserBtn))
                .addGap(33, 33, 33)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(skapaMötesFörfrågaBtn)
                    .addComponent(skapaMöteBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeUsersBtn)
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inviteUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inviteUserBtnActionPerformed
        User user = (User)usersCombobox.getSelectedItem();
        usersToInvite.add(user);
        usersCombobox.removeItem(user);
        updateInviteList();
    }//GEN-LAST:event_inviteUserBtnActionPerformed

    private void invitedListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_invitedListFocusGained
        removeUsersBtn.setEnabled(true);
    }//GEN-LAST:event_invitedListFocusGained

    private void invitedListFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_invitedListFocusLost
        removeUsersBtn.setEnabled(false);
    }//GEN-LAST:event_invitedListFocusLost

  
    private void removeUsersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeUsersBtnActionPerformed
        usersToInvite.clear();
        updateInviteList();
        fetchUsers();
    }//GEN-LAST:event_removeUsersBtnActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        
    }//GEN-LAST:event_formMouseClicked

    private void invitedListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_invitedListValueChanged

    }//GEN-LAST:event_invitedListValueChanged

    private void skapaMöteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skapaMöteBtnActionPerformed
             
        String title = meetingTitleTxt.getText();
        LocalDate meetingDate = meetingTimePicker.datePicker.getDate();
        LocalTime meetingTime = meetingTimePicker.timePicker.getTime();
        
        if(!Validate.localDateIsValid(meetingDate)) {
            JOptionPane.showMessageDialog(null, "Du måste ange ett datum för mötet.");
            return;
        }
        
        if(!Validate.localTimeIsValid(meetingTime)) {
            JOptionPane.showMessageDialog(null, "Du måste ange en tid för mötet.");
            return;
        }
        
        if(title == null || title.length() == 0) {
            JOptionPane.showMessageDialog(null, "Du måste ange en titel.");  
            return;
        }
        
        LocalDateTime meetingDateTime = LocalDateTime.of(meetingDate, meetingTime);
        
     
        //Meeting meeting = new Meeting(title, meetingDateTime, usersToInvite);
        //meetingRepository.createMeeting(meeting);

        JOptionPane.showMessageDialog(null, formatSuccessText(title, meetingDateTime, usersToInvite.size()));  
    }//GEN-LAST:event_skapaMöteBtnActionPerformed

    private void usersComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usersComboboxActionPerformed

    private void skapaMötesFörfrågaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skapaMötesFörfrågaBtnActionPerformed

        LocalDateTime förslag1 = getAndValidateDateTime(tidFörslag1);
        LocalDateTime förslag2 = getAndValidateDateTime(tidFörslag2);
        LocalDateTime förslag3 = getAndValidateDateTime(tidFörslag3);
        
        if(förslag1 == null) {
            return;
        } else if (förslag2==null){
            return; 
        } else if (förslag3==null){
              return; 
        }
        
        String title = meetingTitleTxt.getText();
        
        Meeting meeting = new Meeting(title);
        Integer mötesId = meetingRepository.createMeeting(meeting);
        
        MötesFörslag mötesFörslag = new MötesFörslag(förslag1, förslag2, förslag3, mötesId);
        
        meetingRepository.skapaMötesFörslag(mötesFörslag);
        meetingRepository.bjudInAnvändareTillMöte(usersToInvite, mötesId);
        
        JOptionPane.showMessageDialog(null, "Mötesförslag har skapats");  

    }//GEN-LAST:event_skapaMötesFörfrågaBtnActionPerformed

    /**
     * @param args the command line arguments
     */
        public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Startsida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Startsida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Startsida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Startsida.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SkapaMöte().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton inviteUserBtn;
    private javax.swing.JList<User> invitedList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private com.github.lgooddatepicker.components.DateTimePicker meetingTimePicker;
    private javax.swing.JTextField meetingTitleTxt;
    private javax.swing.JButton removeUsersBtn;
    private javax.swing.JButton skapaMöteBtn;
    private javax.swing.JButton skapaMötesFörfrågaBtn;
    private com.github.lgooddatepicker.components.DateTimePicker tidFörslag1;
    private com.github.lgooddatepicker.components.DateTimePicker tidFörslag2;
    private com.github.lgooddatepicker.components.DateTimePicker tidFörslag3;
    private javax.swing.JLabel tidLbl;
    private javax.swing.JLabel tidLbl2;
    private javax.swing.JLabel tidLbl3;
    private javax.swing.JComboBox<User> usersCombobox;
    // End of variables declaration//GEN-END:variables
}
